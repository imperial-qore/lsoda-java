package odesolver;

import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.MaxCountExceededException;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.junit.jupiter.api.Test;

import java.util.Random;

import static org.junit.jupiter.api.Assertions.*;
class LSODAExampleTest {

    @Test
    void simple_case(){
        LSODA lsoda = new LSODA(0,0,1.0e-12,1.0e-12, 12, 5);
        double[] y = {5.0};
        double t = 0;
        double tout = 4;
        FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
            @Override
            public int getDimension() {
                return 1;
            }

            @Override
            public void computeDerivatives(double t, double[] y, double[] ydot) throws MaxCountExceededException, DimensionMismatchException {
                ydot[0] = 2*y[0];
            }
        };
        long startTime = System.currentTimeMillis();
        double[] result = new double[1];
        lsoda.integrate(ode,t,y,tout,result);
        long endTime = System.currentTimeMillis();
        System.out.printf("Running time: %d ms", endTime-startTime);
        double res = 5*Math.exp(2*tout);
        assertTrue(Math.abs(res-result[0])<1e-6);
        System.out.println(lsoda.getTvec());
        System.out.println(lsoda.getYvec());
        System.out.println(lsoda.getCurrentSignedStepsize());
        assertEquals(lsoda.getCurrentStepStart(),lsoda.tn);
    }

    @Test
    void solve_simple_stiff_equation(){
        LSODA lsoda = new LSODA(0,0,1.0e-3,1.0e-3,12, 5);
        FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
            @Override
            public int getDimension() {
                return 1;
            }

            @Override
            public void computeDerivatives(double t, double[] y, double[] ydot) throws MaxCountExceededException, DimensionMismatchException {
                // y = e^{-15x}
                // f = -12*y
                ydot[0] = -12*y[0];
            }
        };

        double[] y = {1};
        double t = 0;
        double tout = 2;
        double[] result = new double[1];
        long startTime = System.nanoTime();
        lsoda.integrate(ode,t,y,tout,result);
        long endTime = System.nanoTime();
        System.out.printf("Running time: %.6f ms\n", (endTime-startTime)/1000000.0);
        double res = Math.exp(-12*tout);
        assertTrue(Math.abs(res-result[0])<1e-3);
        System.out.printf("The numerical result is: %14.14e\n", result[0]);
        System.out.printf("ATol: %14.14e\n RTol:%14.14e\n", res-result[0],(res-result[0])/res);
        System.out.printf("Jacobian Evaluations:%d\n f evaluations:%d\n",lsoda.getJacobianEvaluations(),lsoda.getEvaluations());
        System.out.printf("Steps taken: %d", lsoda.getStepsTaken());
    }

    @Test
    void solve_a_stiff_first_order_system() {
        LSODA lsoda = new LSODA(0,0,1.0e-6,1.0e-6,3, 5);
        FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
            @Override
            public int getDimension() {
                return 3;
            }

            @Override
            public void computeDerivatives(double t, double[] y, double[] ydot) throws MaxCountExceededException, DimensionMismatchException {
                ydot[0] = 1.0e4 * y[1] * y[2] - 0.04 * y[0];
                ydot[2] = 3.0e7 * y[1] * y[1];
                ydot[1] = -1.0 * (ydot[0] + ydot[2]);
            }
        };
        double[] y = {1.0,0.0,0.0};
        double t = 0;
        double tout = 4e4;
        long startTime = System.nanoTime();
        double[] result = new double[3];
//        for (int i=0; i<10000; i++)
        lsoda.integrate(ode,t,y,tout,result);
        long endTime = System.nanoTime();
        System.out.printf("Running time: %f ms\n", (endTime-startTime)/1000000.0);
//        double[] res4 = {0, 3.898729e-02, 1.621940e-07, 9.610125e-01};  // c version lsoda
        // this result is generated by odeint(python version lsoda)
        double[] res = {0.03898337522971374, 1.6217681683986814e-07, 0.9610164625934687};
        for (int i=0; i<y.length;i++)
            assertTrue(Math.abs(res[i]-result[i])<1e-4);
        System.out.printf("number of Jacobian evals:%d, number of f evals:%d\n",
                lsoda.getJacobianEvaluations(),lsoda.getEvaluations());
        System.out.printf("y1 = %14.14e, y2 = %14.14e, y3 = %14.14e\n", result[0], result[1], result[2]);
        System.out.printf("Steps taken: %d", lsoda.getStepsTaken());
    }

    @Test
    void solve_van_der_pol_oscillator(){
        LSODA lsoda = new LSODA(0,0,1.0e-12,1.0e-12,12, 5);
        FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
            @Override
            public int getDimension() {
                return 2;
            }

            @Override
            public void computeDerivatives(double t, double[] y, double[] ydot) throws MaxCountExceededException, DimensionMismatchException {
//                int mu = 100000;
                int mu = 10;
                ydot[0] = y[1] ;
                ydot[1] = mu*(1-y[0]*y[0])*y[1]-y[0];
            }
        };

        double[] y = {2.0,0.0};
        double t = 0;
        double tout = 100;
        long startTime = System.nanoTime();
        double[] result = new double[2];
        lsoda.integrate(ode,t,y,tout,result);
        long endTime = System.nanoTime();
        System.out.printf("Running time: %.5f ms\n", (endTime-startTime)/1000000.0);
        // MATLAB ode15s result:{1.640537388521751, -0.096284957134040}
        // odeint(python version lsoda) result: {1.640881614898796, -0.0962420382452983}
        double[] res = {1.640881614898796, -0.0962420382452983};
        for (int i=0; i<2;i++)
            assertTrue(Math.abs(res[i]-result[i])<1e-4);
        System.out.printf("number of Jacobian evals:%d, number of f evals:%d\n",
                lsoda.getJacobianEvaluations(),lsoda.getEvaluations());
        System.out.printf("y1 = %16.16e, y2 = %16.16e\n", result[0], result[1]);
        System.out.printf("Steps taken: %d", lsoda.getStepsTaken());
    }

    @Test
    void test_example2_with_closed_form_solution(){
        LSODA lsoda = new LSODA(0,0,1.0e-12,1.0e-12,12, 5);
        FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
            @Override
            public int getDimension() {
                return 2;
            }

            @Override
            public void computeDerivatives(double t, double[] y, double[] ydot) throws MaxCountExceededException, DimensionMismatchException {
                ydot[0] = y[1];
                ydot[1] = 2*y[0]+ydot[0]+2*Math.exp(-t);
            }
        };
        double[] y = {5.5, -14.0/3.0};
        double t = 0;
        double tout = 5;
        double[] result = new double[2];
        long startTime = System.nanoTime();
        lsoda.integrate(ode,t,y,tout,result);
        long endTime = System.nanoTime();
        System.out.printf("Running time: %.5f ms\n", (endTime-startTime)/1000000.0);
        double res = 5*Math.exp(-tout)+0.5*Math.exp(2*tout)-2.0/3.0*tout*Math.exp(-tout);
        assertTrue(Math.abs(res-result[0])<1.0e-1);
        System.out.printf("number of Jacobian evals:%d, number of f evals:%d\n",
                lsoda.getJacobianEvaluations(),lsoda.getEvaluations());
        System.out.printf("y1 = %.16e, y2 = %.16e\n", result[0], result[1]);
        System.out.printf("Absolute error: %.16e, Relative error: %.16e\n", Math.abs(result[0]-res),Math.abs(result[0]-res)/res);
        System.out.printf("Steps taken: %d", lsoda.getStepsTaken());
    }

    @Test
    void test_example3_with_closed_form_solution(){
        LSODA lsoda = new LSODA(0,0,1.0e-9,1.0e-9,12, 5);
        FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
            @Override
            public int getDimension() {
                return 1;
            }

            @Override
            public void computeDerivatives(double t, double[] y, double[] ydot) throws MaxCountExceededException, DimensionMismatchException {
                // y = sin^2 x + cos x
                ydot[0] = 2*Math.cos(t)*Math.sin(t)-Math.sin(t);
            }
        };
        double[] y = {1};
        double t = 0;
        double tout = 10;
        double[] result = new double[1];
        long startTime = System.nanoTime();
        lsoda.integrate(ode,t,y,tout,result);
        long endTime = System.nanoTime();
        System.out.printf("Running time: %.5f ms\n", (endTime-startTime)/1000000.0);
        double res = Math.sin(tout)*Math.sin(tout)+Math.cos(tout);
//        assertTrue(Math.abs(res-result[0])<1.0e-1);
        System.out.printf("number of Jacobian evals:%d, number of f evals:%d\n",
                lsoda.getJacobianEvaluations(),lsoda.getEvaluations());
        System.out.printf("y1 = %.16e\n", result[0]);
        System.out.printf("Absolute error: %.16e, Relative error: %.16e\n", Math.abs(result[0]-res),Math.abs((result[0]-res)/res));
        System.out.printf("Steps taken: %d", lsoda.getStepsTaken());
    }
    @Test
    void test_example_with_min(){
        LSODA lsoda = new LSODA(0,1.0, 1.0e-10,1.0e-10,12, 5);
        FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
            @Override
            public int getDimension() {
                return 2;
            }

            @Override
            public void computeDerivatives(double v, double[] y, double[] ydot) throws MaxCountExceededException, DimensionMismatchException {
                ydot[0] = -5*y[0] + 0.0001*Math.min(y[1],7);
                ydot[1] = 5*y[0] - 0.0001*Math.min(y[1],7);
            }
        };

        double[] y = {10, 0};
        double t = 0;
        double tout = 4;
        double[] result = new double[2];
        long startTime = System.nanoTime();
        lsoda.integrate(ode,t,y,tout,result);
        long endTime = System.nanoTime();
        System.out.printf("Running time: %.5f ms\n", (endTime-startTime)/1000000.0);
        System.out.printf("number of Jacobian evals:%d, number of f evals:%d\n",
                lsoda.getJacobianEvaluations(),lsoda.getEvaluations());
        System.out.printf("y1 = %.16e, y2 = %.16e\n", result[0], result[1]);
    }

    @Test
    void test_not_pass_the_error_test(){
        LSODA lsoda = new LSODA(2e-8,0,1.0-14,3.0-14,12, 5);
        FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
            @Override
            public int getDimension() {
                return 1;
            }

            @Override
            public void computeDerivatives(double t, double[] y, double[] ydot) throws MaxCountExceededException, DimensionMismatchException {
                // y = sin(1/x^2)
                double t3 = t*t*t;
                ydot[0] = -Math.cos(1.0/(t*t))/t3;
            }
        };
        double[] y = {Math.sin(1)};
        double t = -1;
        double tout = 1;
        double[] result = new double[1];
        long startTime = System.nanoTime();
        try{
            lsoda.integrate(ode,t,y,tout,result);
        }catch (RuntimeException e){
            System.out.println(e.getMessage());
        }
        long endTime = System.nanoTime();
        System.out.printf("Running time: %.5f ms\n", (endTime-startTime)/1000000.0);
    }

    @Test
    void test_not_pass_the_convergence_test(){
        LSODA lsoda = new LSODA(2e-7,0,1.0e-14,3.0e-14,12, 5);
        FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
            @Override
            public int getDimension() {
                return 1;
            }

            @Override
            public void computeDerivatives(double t, double[] y, double[] ydot) throws MaxCountExceededException, DimensionMismatchException {
                Random r = new Random();
                double coe = 100 * r.nextDouble();
                double t3 = t*t*t;
                ydot[0] = -coe*Math.cos(1.0/(t*t))/t3;
            }
        };
        double[] y = {Math.sin(1)};
        double t = -1;
        double tout = 1;
        double[] result = new double[1];
        long startTime = System.nanoTime();
        try{
            lsoda.integrate(ode,t,y,tout,result);
        }catch (RuntimeException e){
            System.out.println(e.getMessage());
        }
        long endTime = System.nanoTime();
        System.out.printf("Running time: %.5f ms\n", (endTime-startTime)/1000000.0);
        System.out.printf("Component with max error:%d\n", lsoda.getMaxComponent());
    }

}